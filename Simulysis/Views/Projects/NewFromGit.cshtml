@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model Simulysis.Models.GitUpload;
@if (ViewBag.Status != null)
{
    if (ViewBag.Message != null)
    {
        <h1>@(Convert.ToBoolean(ViewBag.Status) ? "Sucess" : "Failure")  @ViewBag.Message</h1>
    }
}
else
{
    <style>
        .commit:hover, .branch:hover
        {
            cursor: pointer;
        }
        h5.instruction {
            font-size: 0.9rem;
            font-family: "Roboto", sans-serif;
        }
    </style>

    <h5 class="instruction">Please click on a commit to start the uploading progress!</h5>

    <div class="row mt-5 d-flex justify-content-center" style="font-size:22px" id="GitLinkCheckoutDiv">
        <div class="col-10">
            @if ((Model.GitLink != "") && (Model.GitLink != null))
            {
                <form id="uploadFormData" style="display:none">
                    <label asp-for="GitLink" class="input-required col-12 col-lg-3"></label>
                    <input id="GitLink" asp-for="GitLink" class="col-10 col-lg-6" type="text" value="@Model.GitLink" />
                    <input asp-for="ProjectName" type="hidden" id="projectNameGit" />
                    <input asp-for="Description" type="hidden" id="descriptionGit" />
                    <input asp-for="OriginalProjectId" type="hidden" id="originProjectIdGit" />
                    <input asp-for="Branch" type="hidden" id="branch" />
                    <input asp-for="Commit" type="hidden" id="commit" />

                    <button type="submit" style="display:none" id="submitGitUpload"></button>
                </form>
            }
            else
            {
                <form id="uploadFormData">
                    <label asp-for="GitLink" class="input-required col-12 col-lg-3"></label>
                    <input id="GitLink" asp-for="GitLink" class="col-10 col-lg-6" type="text" />
                    <input asp-for="ProjectName" type="hidden" id="projectNameGit" />
                    <input asp-for="Description" type="hidden" id="descriptionGit" />
                    <input asp-for="OriginalProjectId" type="hidden" id="originProjectIdGit" />
                    <input asp-for="Branch" type="hidden" id="branch" />
                    <input asp-for="Commit" type="hidden" id="commit" />

                    <button type="submit" style="display:none" id="submitGitUpload"></button>
                </form>
            }
        </div>
        @if ((Model.GitLink != "") && (Model.GitLink != null))
        {
            <button id="GitLinkCheckout" type="submit" class="col-2 col-lg-2 ms-4" style="display: none">Check</button>
        }
        else
        {
            <button id="GitLinkCheckout" type="submit" class="col-2 col-lg-2 ms-4" style="width: 100px">Check</button>
        }
    </div>

    <table class="table col-sm-12 mt-4" id="GitPicker" style="display:none">
        <tr>
            <td class="col-sm-4">
                <input type="text" id="inputBranchSearch" class="w-100" />
                <div id="GitBranches">
                </div>
            </td>
            <td class="col-sm-8">
                <input type="text" id="inputCommitSearch" class="w-100" />
                <div id="GitCommits">

                </div>
            </td>
        </tr>
    </table>

    <div class="modal fade" id="uploadingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Uploading...</h5>
                </div>
                <div class="modal-body">
                    Please don't exit while the upload is in progress
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="uploadSuccessModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Uploading success!</h5>
                </div>
                <div class="modal-body">
                    Upload project/version has finished!
                </div>
            </div>
        </div>

    </div>
    <div class="modal fade" id="uploadFailedModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Uploading failed!</h5>
                </div>
                <div class="modal-body">
                    Upload project/version failed! Please recheck your files!
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="confirmGitUploadModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirming upload</h5>
                </div>
                <div class="modal-body">
                    Do you want to upload this commit?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                    <button type="button" class="btn btn-primary" id="confirmGitUploadBtn">Yes</button>
                </div>
            </div>
        </div>
    </div>

    <input type="hidden" id="currentPageNumBranches" value="1" />
    <input type="hidden" id="currentPageNumCommits" value="1" />

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js?v=1.0.21.0"></script>

    <script>
        function handleGit() {
            let currentBranch = ""

            function debounce(callback, wait) {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(function () { callback.apply(this, args); }, wait);
                };
            }

            async function updateGitCommits() {
                var result = await $.get('@Url.Content("~/Projects/ListGitCommits")', { projectUrl: $("#GitLink").val(), branch: currentBranch, filter: $('#inputCommitSearch').val(), currentPage: $('currentPageNumCommits').val() ?? 1 });
                $("#GitCommits").html(result);

                $(".commit").each(function (i, commitElem) {
                    $(commitElem).click(function () {
                        $("#confirmGitUploadModal").modal('show')
                        let commitId = $(this).attr("id")

                        $("#confirmGitUploadBtn").click(async function () {
                            $("#confirmGitUploadModal").modal('hide')

                            $("#uploadingModal").modal({ backdrop: 'static', keyboard: false })
                            $("#uploadingModal").modal('show');

                            var formData = new FormData();
                            formData.append("ProjectName", $("#projectName").val())
                            formData.append("Description", $("#Description").val())
                            formData.append("OriginalProjectId", $("#OriginalProjectId").val())
                            formData.append("Branch", currentBranch)
                            formData.append("Commit", commitId);
                            formData.append("GitLink", $("#GitLink").val());

                            var result = await $.ajax({
                                url: '@Url.Content("~/Projects/CreateNewFromGit")',
                                data: formData,
                                cache: false,
                                contentType: false,
                                processData: false,
                                method: 'POST',
                                type: 'POST', // For jQuery < 1.9
                                success: function (data) {
                                    $("#uploadingModal").modal('hide');
                                    $("#uploadSuccessModal").modal("show")
                                },
                                error: function (data) {
                                    $("#uploadingModal").modal('hide');
                                    $("#uploadFailedModal").modal("show")
                                }
                            });
                        });
                    })
                });
            }

            $(document).ready(function () {
                $("#GitPicker").hide()

                $('#inputBranchSearch').keyup(debounce(() => { $("#GitLinkCheckout").click() }, 50));
                $('#inputCommitSearch').keyup(debounce(async () => { await updateGitCommits(); }, 50))

                $("#GitLinkCheckout").click(async function (e) {
                    var uploadView = document.getElementsByClassName("uploadView")[1];
                    uploadView.classList.add("stretch-big")
                    e.preventDefault();

                    var result = await $.get('@Url.Content("~/Projects/ListGitBranches")', { projectUrl: $("#GitLink").val(), currentPage: $("#currentPageNumBranches").val() ?? 1, filter: $('#inputBranchSearch').val() });

                    $("#GitCommits").empty()
                    $("#GitBranches").html(result);
                    $("#GitPicker").show()

                    $(".branch").click(async function () {
                        currentBranch = $(this).attr('id')
                        await updateGitCommits();
                    })
                });

                if ($("#uploadFormData").css("display") == "none") {
                    $("#GitLinkCheckout").click()
                }
            })
        }

        handleGit();
    </script>


    @if ((ViewBag.Branches) != null)
    {
        <div>
            <ul>
                @foreach (var branch in ViewBag.Branches)
                {
                    <li>
                        <a asp-controller="Projects" asp-action="CreateNewFromGit" asp-route-branch="@branch.Name">
                            @branch.Name
                        </a>

                    </li>
                }
            </ul>

        </div>
    }

    @if ((ViewBag.Commits) != null)
    {
        <div>
            <ul>
                @foreach (var commit in ViewBag.Commits)
                {
                    <li>
                        <a asp-controller="Projects" action="CreateNewFromGit" asp-route-branch="@ViewBag.CurrentBranch" asp-route-sha="@commit.Sha" asp-route-commit="@commit.Commit.Message">
                            @commit.Commit.Message;
                        </a>
                    </li>
                }
            </ul>

        </div>
    }

    @if ((ViewBag.Files != null))
    {
        <div>
            <ul>

                @for (int index = 0; index < ViewBag.Files.Count; index++)
                {
                    <li>
                        <a asp-controller="Projects" asp-action="CreateNewFromGit" asp-route-index="@index" asp-route-branch="@ViewBag.CurrentBranch" asp-route-sha="@ViewBag.Sha">
                            @ViewBag.Files[index]
                        </a>
                    </li>

                }
            </ul>
        </div>
    }
}
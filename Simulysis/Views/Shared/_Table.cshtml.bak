@model Simulysis.Models.TableView
<div class="modal fade"
     id="confirmDelete"
     data-bs-backdrop="static"
     data-bs-keyboard="false"
     tabindex="-1"
     aria-labelledby="confirmDeleteLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Delete confirmation</h5>
            </div>
            <div class="modal-body">
                Do you want to delete the selected @ViewBag.ItemName?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light @(ViewBag.DeleteForm)-btn" data-bs-dismiss="modal">
                    Cancel
                </button>

                <button type="submit"
                        form=@ViewBag.DeleteForm
                        id="@(ViewBag.DeleteForm)-submit"
                        class="btn btn-danger d-flex align-items-center @(ViewBag.DeleteForm)-btn">
                    <span class="spinner-border spinner-border-sm mr-2" hidden role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@if (TempData["DeletedMessage"] != null)
{
    if ((bool)TempData["DeleteStatus"])
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            <strong>Success!</strong> @TempData["DeletedMessage"]
            <button type="button" class="close" data-bs-dismiss="alert" id="deleteAlertBtn" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    else
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <strong>Error!</strong> @TempData["DeletedMessage"]
            <button type="button" class="close" data-bs-dismiss="alert" id="deleteAlertBtn" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
}

<<<<<<< HEAD
<div class="d-flex justify-content-end search-list input-group">
    @Html.EditorFor(m => m.SearchContent, new { htmlAttributes = new { id = "searchBox", @class = "form-control col-3 mr-3", form = @ViewBag.UtilsForm, placeholder = "Search here" } })

    <button id="searchSubmit" class="btn" form="@ViewBag.UtilsForm" type="submit"><b>Search</b></button>
</div>

=======
>>>>>>> origin/main
<div class="my-4">
    @using (Html.BeginForm("Delete", (string)ViewBag.Controller, FormMethod.Post, new { id = ViewBag.DeleteForm }))
    {
        <table class="table table-bordered table-hover">
            <thead class="thead--primary">
                <tr>
                    <th scope="col" class="col--checkbox">
                        <input type="checkbox">
                    </th>
                    @foreach (var columnProp in Model.ColumnProps)
                    {
                        <th scope="col" class="col" style="width: @(columnProp.WidthPercentage)%;">
                            @columnProp.DisplayName
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    List<dynamic> paginatedItems = Model.PaginatedItems();
                }

                @for (int i = 0; i < paginatedItems.Count; i++)
                {
                    dynamic item = paginatedItems[i];
                    var routeValue = item.RouteValue() as IDictionary<string, string>;
                    Console.WriteLine(Model.LinkAction);
                    <tr>
                        <th scope="row" class="col--checkbox">
                            @Html.HiddenFor(m => m.DeleteViews[i].IdToDelete)
                            @Html.CheckBoxFor(m => m.DeleteViews[i].IsSelected)
                            @foreach (var pair in Model.DeleteViews[i].AdditionalInfo)
                            {
                                <input hidden name="@(pair.Key)#@(i)" value="@pair.Value" />
                            }
                        </th>
                        @foreach (var columnProp in Model.ColumnProps)
                        {
                            <td class="col" style="width: @(columnProp.WidthPercentage)%;">
                                
                               <a href="@Url.Action(Model.LinkAction, Model.LinkController, ((Object)item.RouteValue()))">
                                    @item.GetType().GetProperty(columnProp.PropertyName).GetValue(item)
                                </a>
                              @*   <a asp-controller="@Model.LinkController" asp-action="@Model.LinkAction" asp-route-projectId="@item.RouteValue().GetType().GetProperty("projectId").GetValue(item.RouteValue())">
                                    @item.GetType().GetProperty(columnProp.PropertyName).GetValue(item)
                    </a>*@
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }


    <div class="d-flex justify-content-end">
        @{
            RouteValueDictionary routeValues = new RouteValueDictionary();
            foreach (var key in Context.Request.Query.Keys)
            {
                routeValues.Add(key, Context.Request.Query[key]);
            }
            routeValues["show"] = Model.ItemPerPage;
        }

        @using (Html.BeginForm("Index", (string)ViewBag.Controller, FormMethod.Get, new { @class = "d-flex", id = ViewBag.UtilsForm }))
        {
            foreach (var value in routeValues)
            {
                if (value.Key != "show" && value.Key != "page" && value.Key != "SearchContent")
                {
                    <input hidden name="@value.Key" value="@value.Value" />
                }
            }

            <select name="show" onchange="this.form.submit()">
                @foreach (int pageSize in Model.PageSizes)
                {
                    <option value=@pageSize selected=@(Model.ItemPerPage == pageSize)>@pageSize</option>
                }
            </select>
        }

        <ul class="pagination mb-0 ml-3">
            @if (Model.CurrentPage > 1)
            {
                routeValues["page"] = Model.CurrentPage - 1;

                <li class="page-item">
                    <a class="page-link" style="background: #1D5193; color: white" href="@Url.Action("Index", (string)ViewBag.Controller, routeValues)">
                        Previous
                    </a>
                </li>
            }

            @{
                int padding = 2;
                int pageCount = Model.PageCount();

                for (int i = 1; i <= pageCount; i++)
                {
                    routeValues["page"] = i;

                    if (pageCount > 5 * padding + 1)
                    {
                        if
                        (
                            i <= padding ||
                            i > pageCount - padding ||
                            (i >= Model.CurrentPage - padding && i <= Model.CurrentPage + padding)
                        )
                        {
                            <li class="@(i == Model.CurrentPage ? "page-item active" : "page-item")">
                                <a class="page-link" style="background: #1D5193; color: white"
                                   href="@Url.Action("Index", (string)ViewBag.Controller, routeValues)">
                                    @i
                                </a>
                            </li>
                        }
                        else if (i == Model.CurrentPage - padding - 1 || i == Model.CurrentPage + padding + 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link" tabindex="-1">...</span>
                            </li>
                        }
                    }
                    else
                    {

                        <li class="@(i == Model.CurrentPage ? "page-item active" : "page-item")">
                            <a class="page-link" style="background: #1D5193; color: white"
                               href="@Url.Action("Index", (string)ViewBag.Controller, routeValues)">
                                @i
                            </a>
                        </li>
                    }
                }
            }

            @if (Model.CurrentPage < Model.PageCount())
            {
                routeValues["page"] = Model.CurrentPage + 1;

                <li class="page-item">
                    <a class="page-link" style="background: #1D5193; color: white"
                       href="@Url.Action("Index", (string)ViewBag.Controller, routeValues)">
                        Next
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
	    setTimeout(() => {
		    $('#deleteAlertBtn').click()
	    }, 3000)

	    $('.col--checkbox > input:checkbox:first-of-type').change(function () {
		    $('.col--checkbox > input:checkbox').not(this).prop('checked', this.checked)
	    })

	    var checkboxes = $('.col--checkbox > input:checkbox').not(':first-of-type')
	    var lastChecked = null

	    checkboxes
		    .click(function (e) {
			    if (!lastChecked) {
				    lastChecked = this
				    return
			    }

			    if (e.shiftKey) {
				    let start = checkboxes.index(this)
				    let end = checkboxes.index(lastChecked)

				    checkboxes.slice(Math.min(start, end), Math.max(start, end) + 1).prop('checked', lastChecked.checked)
			    }

			    lastChecked = this
		    })
		    .change(function () {
			    const allChecked = checkboxes.get().every(cb => cb.checked)

			    $('.col--checkbox > input:checkbox:first-of-type').prop('checked', allChecked)
		    })

	    $('#@(ViewBag.DeleteForm)').submit(function handleSubmit(e) {
		    e.preventDefault()

		    $('#@(ViewBag.DeleteForm)-submit').contents().last()[0].textContent = 'Deleting'
		    $('#@(ViewBag.DeleteForm)-submit > .spinner-border').prop('hidden', false)

		    $('.@(ViewBag.DeleteForm)-btn').prop('disabled', true)

		    $(this)[0].submit()
        })

        $('#deleteSearch').click(function clearSearch(e) {
            $('#searchBox').val("")
            $('#searchSubmit').click()
        })
    })
</script>